From 0038afdcd8b80b22f58aa0cd2a4154802f715195 Mon Sep 17 00:00:00 2001
From: Ismo Puustinen <ismo.puustinen@intel.com>
Date: Mon, 20 Feb 2017 23:21:48 +0200
Subject: [PATCH] api: mark platform not supported if device is not found.

If the device specified by GEN_PCI_ID cmake switch during compilation
time is not present when the ICD loader queries the driver, mark
platform as not supported.

This enables the use case where there are multiple beignet libraries,
each for a different target hardware. Then the ICD loader will only use
the correct library.

Upstream-status: Pending

Signed-off-by: Ismo Puustinen <ismo.puustinen@intel.com>
---
 src/CMakeLists.txt       |  5 ++++
 src/cl_api_platform_id.c | 73 ++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 78 insertions(+)

diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 77a1c87..0a67acd 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -7,6 +7,11 @@ include_directories(${CMAKE_CURRENT_SOURCE_DIR}
                     ${OPENGL_INCLUDE_DIRS}
                     ${EGL_INCLUDE_DIRS})
 
+if(GEN_PCI_ID)
+  STRING(REGEX REPLACE "0x" "" ONLY_PCI_ID ${GEN_PCI_ID})
+  add_definitions(-DPCI_ID=${ONLY_PCI_ID})
+endif(GEN_PCI_ID)
+
 macro (MakeKernelBinStr KERNEL_DIST KERNEL_SOURCE KERNEL_FILES)
 foreach (KF ${KERNEL_FILES})
   set (input_file ${KERNEL_SOURCE}/${KF}.cl)
diff --git a/src/cl_api_platform_id.c b/src/cl_api_platform_id.c
index 10d8894..1045e93 100644
--- a/src/cl_api_platform_id.c
+++ b/src/cl_api_platform_id.c
@@ -19,6 +19,13 @@
 #include "cl_platform_id.h"
 #include "CL/cl_ext.h"
 
+#include <string.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+#define STR(x) #x
+#define PCI_ID_STRING(x) STR(x)
+
 cl_int
 clGetPlatformInfo(cl_platform_id platform,
                   cl_platform_info param_name,
@@ -33,6 +40,72 @@ clGetPlatformInfo(cl_platform_id platform,
     return CL_INVALID_PLATFORM;
   }
 
+#ifdef PCI_ID
+  /* Check the PCI id here. */
+  if (strlen(PCI_ID_STRING(PCI_ID)) == 4) {
+    char *line = NULL;
+    ssize_t read_bytes = 0;
+    size_t n = 0;
+    FILE *pci_ids = fopen("/proc/bus/pci/devices", "r");
+
+    int match = 0;
+
+    if (pci_ids) {
+      while ((read_bytes = getline(&line, &n, pci_ids)) != -1) {
+        ssize_t used = 0;
+        char *s = line, *e;
+
+        /* find first '\t' */
+        while (used < read_bytes && *s != '\t') {
+          s++;
+          used++;
+        }
+        if (used == read_bytes) {
+          continue;
+        }
+
+        /* find second '\t' */
+        e = s + 1;
+        used++;
+        while (used < read_bytes && *e != '\t') {
+          e++;
+          used++;
+        }
+        if (used == read_bytes) {
+          continue;
+        }
+
+        /* the data is now in the eight characters between 's' and 'e'
+         * variables */
+
+        if (e-s != 9) {
+          continue;
+        }
+
+        /* ok, we got the id */
+        if (strncasecmp(s+5, PCI_ID_STRING(PCI_ID), 4) != 0) {
+          continue;
+        }
+
+        /* We could, in principle, search the rest of the line for any
+         * evidence that this in fact is a GPU device. However, we don't
+         * implement that heuristic here. It seems unlikely that production
+         * systems will have multiple ICDs that accidentally match their
+         * PCI ids to non-GPU devices. */
+
+        match = 1;
+        break;
+      }
+    }
+
+    free(line);
+
+    if (!match) {
+      return CL_INVALID_PLATFORM;
+    }
+  }
+#endif
+
   /* Only one platform now. */
   if (platform != cl_get_platform_default()) {
     return CL_INVALID_PLATFORM;
-- 
2.9.3

